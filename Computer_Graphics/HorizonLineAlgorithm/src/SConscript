#  This file is part of HLA - Horizon Line Algorithm implementation.
#
#  Copyright (C) 2010  Vladimir Rutsky <altsysrq@gmail.com>
#
#  HLA is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  HLA is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with HLA.  If not, see <http://www.gnu.org/licenses/>.

import os.path
import itertools

Import('env')

env['Gch'] = env.Gch('precompiled.hpp')[0]

# Compilation warnings.
env.MergeFlags(env.ParseFlags("-W -Wall -g -I#eigen2"))

# Eigen library.
env.MergeFlags(env.ParseFlags("-I#eigen2"))

# FLTK library.
#env.ParseConfig("fltk-config --cxxflags --ldflags --use-gl")
env.ParseConfig("fltk-config --cxxflags --ldflags")

# Fluid stuff
def fluid_generate_actions(source, target, env, for_signature):
    assert len(source) == 1
    source_base_name = os.path.splitext(str(source[0]))[0]
    return 'cd src; fluid -o ../%s.cpp -h ../%s.h -c ../%s.fl; cd ..' % ((source_base_name,) * 3)

fluid_builder = \
    Builder(generator = fluid_generate_actions,
            suffix = "",
            src_suffix = ".fl")
env.Append(BUILDERS = {'Fluid': fluid_builder})

env.Fluid('main_window.fl')
                                                        

source_files = Glob("*.cpp")

env.Program(
    target="hla",
    source=source_files,
    )
